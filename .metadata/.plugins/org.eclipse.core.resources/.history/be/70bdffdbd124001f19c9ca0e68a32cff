package feature.movie;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;

import core.domain.movie.Movie;
import core.domain.reservation.Reservation;
import core.domain.screeningschedule.ScreeningSchedule;
import core.domain.ticket.Ticket;

class TicketButtonsPanel extends JPanel implements ListSelectionListener {
	private MovieSearchViewModel viewModel;
	private JButton updateMovieButton;
	private JButton updateScheduleButton;
	private JButton deleteButton;
	private TicketTable table;
	
	TicketButtonsPanel(MovieSearchViewModel viewModel, TicketTable table) {
		this.viewModel = viewModel;
		this.table = table;
		this.table.getSelectionModel().addListSelectionListener(this);
		
		this.updateMovieButton = new JButton("영화 변경");
		this.updateMovieButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (viewModel.selectedReservation == null) {
					JOptionPane.showMessageDialog(updateMovieButton, "예매정보를 선택해 주세요!", "Information", JOptionPane.INFORMATION_MESSAGE);
				} else {
					new MovieListModal(viewModel);
				}
			}
		});
		this.add(updateMovieButton);
		
		this.updateScheduleButton = new JButton("일정 변경");
		this.updateScheduleButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (viewModel.selectedReservation == null) {
					JOptionPane.showMessageDialog(updateScheduleButton, "예매정보를 선택해 주세요!", "Information", JOptionPane.INFORMATION_MESSAGE);
				} else {
					viewModel.updateScheduleButtonClicked();
				}
			}
		});
		this.add(updateScheduleButton);
	}

	@Override
	public void valueChanged(ListSelectionEvent e) {
		// TODO Auto-generated method stub
		this.viewModel.ticketTableCellClicked(this.table.getSelectedRow());
	}
}

class ReservationTableHeaderRenderer extends DefaultTableCellRenderer {
	@Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        c.setFont(new Font(null, Font.BOLD, 16));

        return c;
    }
}

class ReservationTableCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        c.setFont(new Font(null, Font.PLAIN, 12));
        // 선택된 셀의 배경색과 텍스트 색상 설정
        if (isSelected) {
            c.setBackground(Color.LIGHT_GRAY);
            c.setForeground(Color.WHITE);
        } else {
            c.setBackground(Color.WHITE);
            c.setForeground(Color.BLACK);
        }

        return c;
    }
}

class TicketTable extends JTable {
	private MovieSearchViewModel viewModel;
	
	TicketTable(MovieSearchViewModel viewModel) {
		this.viewModel = viewModel;
		this.setModel(this.viewModel.ticketsToTableModel());
		this.setRowHeight(40);
		this.setDefaultRenderer(Object.class, new ReservationTableCellRenderer());
		
		JTableHeader header = this.getTableHeader();
		header.setDefaultRenderer(new ReservationTableHeaderRenderer());
		TableColumn durationHeader = header.getColumnModel().getColumn(1);
		durationHeader.setWidth(100);
	}
}

class ReservationTable extends JTable {
	private MovieSearchViewModel viewModel;
	
	ReservationTable(MovieSearchViewModel viewModel) {
		this.viewModel = viewModel;
		this.setModel(this.viewModel.reservationsToTableModel());
		this.setRowHeight(40);
		this.setDefaultRenderer(Object.class, new ReservationTableCellRenderer());
		
		JTableHeader header = this.getTableHeader();
		header.setDefaultRenderer(new ReservationTableHeaderRenderer());
	}
}

class ReservationListPanel extends JPanel implements ListSelectionListener {
	private MovieSearchViewModel viewModel;
	private ReservationTable reservationTable;
	private TicketTable tickeTable;
	
	ReservationListPanel(MovieSearchViewModel viewModel) {
		this.viewModel = viewModel;
		this.setLayout(new BorderLayout(20, 20));
		
		JPanel reservationPanel = new JPanel();
		reservationPanel.setLayout(new BorderLayout());
		JLabel reservationLabel = new JLabel("예약정보");
		reservationLabel.setFont(new Font(null, Font.PLAIN, 16));
		reservationPanel.add(reservationLabel, BorderLayout.NORTH);
		
		this.reservationTable = new ReservationTable(this.viewModel);
		this.reservationTable.setRowSelectionInterval(0, 0);
		this.reservationTable.getSelectionModel().addListSelectionListener(this);
		this.viewModel.reservationCellSelected(0);
		
		JScrollPane reservationTableScrollPane = new JScrollPane();
		reservationTableScrollPane.setViewportView(this.reservationTable);
		reservationPanel.add(reservationTableScrollPane, BorderLayout.CENTER);
		this.add(reservationPanel, BorderLayout.NORTH);
		
		JPanel ticketPanel = new JPanel();
		ticketPanel.setLayout(new BorderLayout());
		JLabel ticketLabel = new JLabel("티켓정보");
		ticketLabel.setFont(new Font(null, Font.PLAIN, 16));
		ticketPanel.add(ticketLabel, BorderLayout.NORTH);
		
		this.tickeTable = new TicketTable(this.viewModel);
		
		JScrollPane tickeTableScrollPane = new JScrollPane();
		tickeTableScrollPane.setViewportView(this.tickeTable);
		ticketPanel.add(tickeTableScrollPane, BorderLayout.CENTER);
		this.add(ticketPanel, BorderLayout.CENTER);
		
		TicketButtonsPanel buttonsPanel = new TicketButtonsPanel(this.viewModel, this.tickeTable);
		JButton deleteButton = new JButton("예약 삭제");
		deleteButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if (viewModel.selectedReservation == null) {
					JOptionPane.showMessageDialog(deleteButton, "예약정보를 선택해 주세요!", "Information", JOptionPane.INFORMATION_MESSAGE);
				} else {
					viewModel.deleteButtonClicked();
					reservationTable.setModel(viewModel.reservationsToTableModel());
					reservationTable.getSelectionModel().setSelectionMode(0);
					tickeTable.setModel(viewModel.ticketsToTableModel());
				}
			}
		});
		buttonsPanel.add(deleteButton);
		this.add(buttonsPanel, BorderLayout.SOUTH);
	}

	@Override
	public void valueChanged(ListSelectionEvent e) {
		// TODO Auto-generated method stub
		this.viewModel.reservationCellSelected(this.reservationTable.getSelectedRow());
		this.tickeTable.setModel(this.viewModel.ticketsToTableModel());
	}
	
	public void updateTable() {
		this.reservationTable.setModel(this.viewModel.reservationsToTableModel());
		this.tickeTable.setModel(this.viewModel.ticketsToTableModel());
	}
}

class MovieTableHeaderRenderer extends DefaultTableCellRenderer {
	@Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        c.setFont(new Font(null, Font.BOLD, 20));

        return c;
    }
}

class MovieTableCellRenderer extends DefaultTableCellRenderer {
    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        c.setFont(new Font(null, Font.PLAIN, 16));
        // 선택된 셀의 배경색과 텍스트 색상 설정
        if (isSelected) {
            c.setBackground(Color.LIGHT_GRAY);
            c.setForeground(Color.WHITE);
        } else {
            c.setBackground(Color.WHITE);
            c.setForeground(Color.BLACK);
        }

        return c;
    }
}

class MovieTable extends JTable {
	MovieTable(DefaultTableModel tableModel) {
		this.setModel(tableModel);
		this.setRowHeight(40);
		this.setDefaultRenderer(Object.class, new MovieTableCellRenderer());
		
		TableColumn titleColumn = this.getColumnModel().getColumn(0);
		titleColumn.setMinWidth(150);
		titleColumn.setMaxWidth(200);
		
		TableColumn durationColumn = this.getColumnModel().getColumn(1);
		durationColumn.setMinWidth(100);
		durationColumn.setMaxWidth(100);
		
		TableColumn ratingColumn = this.getColumnModel().getColumn(2);
		ratingColumn.setMinWidth(150);
		ratingColumn.setMaxWidth(150);
		
		TableColumn directorColumn = this.getColumnModel().getColumn(3);
		directorColumn.setMinWidth(80);
		directorColumn.setMaxWidth(90);
		
		TableColumn actorColumn = this.getColumnModel().getColumn(4);
		actorColumn.setMinWidth(80);
		actorColumn.setMaxWidth(90);
		
		TableColumn genreColumn = this.getColumnModel().getColumn(5);
		genreColumn.setMinWidth(80);
		genreColumn.setMaxWidth(90);
		
		TableColumn	releaseDateColumn = this.getColumnModel().getColumn(6);
		releaseDateColumn.setMinWidth(300);
		releaseDateColumn.setMaxWidth(300);
		
		TableColumn scoreColumn = this.getColumnModel().getColumn(7);
		scoreColumn.setMaxWidth(80);
		
		TableColumn descriptionColumn = this.getColumnModel().getColumn(8);
		descriptionColumn.setMinWidth(300);
		
		
		JTableHeader header = this.getTableHeader();
		header.setDefaultRenderer(new MovieTableHeaderRenderer());
		TableColumn durationHeader = header.getColumnModel().getColumn(1);
		durationHeader.setWidth(100);
	}
}

class SearchTextFieldPanel extends JPanel {
	JLabel title;
	JTextField textField;
	
	public SearchTextFieldPanel(String title, KeyListener keyListener) {
		this.title = new JLabel(title);
		this.textField = new JTextField(10);
		this.textField.addKeyListener(keyListener);
		this.title.setFont(new Font(null, Font.PLAIN, 20));
		this.textField.setFont(new Font(null, Font.PLAIN, 20));
		this.add(this.title);
		this.add(this.textField);
	}
}

class MovieSearchTextFields extends JPanel {
	SearchTextFieldPanel title;
	SearchTextFieldPanel director;
	SearchTextFieldPanel actor;
	SearchTextFieldPanel genre;
	
	public MovieSearchTextFields(MovieSearchViewModel viewModel, JTable table) {
		this.setLayout(new FlowLayout(FlowLayout.LEADING));
		this.title = new SearchTextFieldPanel("제목", new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) { }

			@Override
			public void keyPressed(KeyEvent e) { }

			@Override
			public void keyReleased(KeyEvent e) { 
				viewModel.titleTextFieldKeyReleased(title.textField.getText());
				table.setModel(viewModel.moviesToTableModel());
				revalidate();
				repaint();
			}
		});
		this.director = new SearchTextFieldPanel("감독", new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {}

			@Override
			public void keyPressed(KeyEvent e) { }

			@Override
			public void keyReleased(KeyEvent e) {
				viewModel.directorTextFieldKeyReleased(director.textField.getText());
				table.setModel(viewModel.moviesToTableModel());
				revalidate();
				repaint();
			}
		});
		this.actor = new SearchTextFieldPanel("배우", new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {}

			@Override
			public void keyPressed(KeyEvent e) { }

			@Override
			public void keyReleased(KeyEvent e) {
				viewModel.actorTextFieldKeyReleased(actor.textField.getText());
				table.setModel(viewModel.moviesToTableModel());
				revalidate();
				repaint();
			}
		});
		this.genre = new SearchTextFieldPanel("장르", new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {}

			@Override
			public void keyPressed(KeyEvent e) { }

			@Override
			public void keyReleased(KeyEvent e) { 
				viewModel.genreTextFieldKeyReleased(genre.textField.getText());
				table.setModel(viewModel.moviesToTableModel());
				revalidate();
				repaint();
			}
		});
		this.add(this.title);
		this.add(this.director);
		this.add(this.actor);
		this.add(this.genre);
	}
}

class MovieSearchTitlePanel extends JPanel {
	MovieSearchTitlePanel(MovieSearchViewModel viewModel, JTable table) {
		this.setLayout(new GridLayout(2, 1));
		this.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
		JLabel title = new JLabel("영화 검색", JLabel.LEADING);
		title.setFont(new Font(null, Font.BOLD, 32));
		title.setBorder(BorderFactory.createEmptyBorder(0, 0, 32, 0));
		this.add(title);
		this.add(new MovieSearchTextFields(viewModel, table));
	}
}

class MovieListCellRenderer extends JPanel implements ListCellRenderer<Movie> {
    private JLabel label;

    public MovieListCellRenderer() {
        setLayout(new BorderLayout());
        label = new JLabel();
        label.setFont(new Font(null, Font.PLAIN, 20));
        label.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));
        add(label);
    }

    @Override
    public Component getListCellRendererComponent(JList<? extends Movie> list, Movie value, int index, boolean isSelected, boolean cellHasFocus) {
        label.setText(value.getTitle());
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            label.setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            label.setForeground(list.getForeground());
        }
        setOpaque(true);
        return this;
    }
}

class MovieListModal extends JFrame implements ListSelectionListener {
	MovieSearchViewModel viewModel;
	JList<Movie> list;
	
	public MovieListModal(MovieSearchViewModel viewModel) {
		this.viewModel = viewModel;
		DefaultListModel<Movie> listModel = new DefaultListModel<>();
		this.viewModel.allMovies().forEach(movie -> listModel.addElement(movie));
		this.setTitle("변경할 영화 선택");
		this.setSize(300, 500);
		
		
		this.list = new JList<>(listModel);
        this.list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        this.list.setCellRenderer(new MovieListCellRenderer());
        this.list.addListSelectionListener(this);
        this.setPreferredSize(new Dimension(200, 500));

        // JScrollPane에 JList 추가
        JScrollPane scrollPane = new JScrollPane(list);
        scrollPane.setPreferredSize(new Dimension(200, 1080));
        this.add(scrollPane);
        
        this.setVisible(true);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}

	@Override
	public void valueChanged(ListSelectionEvent e) {
		// TODO Auto-generated method stub
		this.viewModel.movieListCellSelected(this.list.getSelectedValue());
		this.dispose();
	}
}

public class MovieSearchView extends JFrame implements ListSelectionListener {
	private final MovieSearchViewModel viewModel;
	private MovieTable table;
	private ReservationListPanel reservationListPanel;
	
	public MovieSearchView(MovieSearchViewModel viewModel) {
		this.setTitle("영화관 예약 시스템");
		this.setSize(1920, 1080);
		this.viewModel = viewModel;
		this.setLayout(new BorderLayout(20, 20));
		
		this.table = new MovieTable(viewModel.moviesToTableModel());
		this.table.getSelectionModel().addListSelectionListener(this);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setViewportView(this.table);
		this.add(scrollPane, BorderLayout.CENTER);
		
		this.add(new MovieSearchTitlePanel(this.viewModel, this.table), BorderLayout.NORTH);
		
		this.reservationListPanel = new ReservationListPanel(this.viewModel);
		this.add(this.reservationListPanel, BorderLayout.EAST);
		
		this.setVisible(true);
		this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
	}
	
	@Override
	public void valueChanged(ListSelectionEvent e) {
		if(!e.getValueIsAdjusting()) {
			System.out.println("selected :" + this.viewModel.movies.get(table.getSelectedRow()));
			viewModel.movieTableCellTapped(this.viewModel.movies.get(table.getSelectedRow()));
		}
	}
	
	public void updateReservationList() {
		this.viewModel.updateReservations();
		this.reservationListPanel.updateTable();
	}
}
