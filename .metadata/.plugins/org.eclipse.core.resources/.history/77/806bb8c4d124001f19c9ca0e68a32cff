package feature.movie;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

import core.domain.member.Member;
import core.domain.movie.Movie;
import core.domain.reservation.Reservation;
import core.domain.ticket.Ticket;
import core.domain.ticket.TicketInfoResponse;
import feature.reservation.ReverationSummary;
import feature.screen.ScreenViewModel;
import feature.screen.ScreenViewModelDelegate;
import feature.user.UserController;

public class MovieSearchViewModel {
	private final UserController userController;
	public MovieSearchViewModelDelegate delegate;
	public List<Movie> movies;
	public List<ReverationSummary> memberReservations;
	public List<TicketInfoResponse> reservationTickets;
	public Member member;
	public String title = null;
	public String director = null;
	public String actor = null;
	public String genre = null;
	public TicketInfoResponse selectedTicket = null;
	public ReverationSummary selectedReservation = null;
	
	public MovieSearchViewModel(UserController userController) {
		this.userController = userController;
		this.movies = this.userController.searchMovies(
				new SearchCriteria(
				this.title, 
				this.director, 
				this.actor, 
				this.genre
			)
		);
		this.member = this.userController.getMember();
		this.memberReservations = this.userController.getReservationSummary(member);
		
		if (this.memberReservations.isEmpty()) {
			this.reservationTickets = new ArrayList<TicketInfoResponse>();
		} else {
			this.reservationTickets = this.userController.getTicketInfoResponses(this.memberReservations.get(0).revervationId());
		}
	}
	
	public void titleTextFieldKeyReleased(String title) {
		this.title = title;
		System.out.println(this.title);
		this.title = this.title.isBlank() ? null : title;
		this.updateMoviesByCriteria();
	}
	
	public void directorTextFieldKeyReleased(String director) {
		this.director = director;
		director = director.isBlank() ? null : director;
		this.updateMoviesByCriteria();
	}
	
	public void actorTextFieldKeyReleased(String actor) {
		this.actor = actor;
		actor = actor.isBlank() ? null : actor;
		this.updateMoviesByCriteria();
	}
	
	public void genreTextFieldKeyReleased(String genre) {
		this.genre = genre;
		genre = genre.isBlank() ? null : genre;
		this.updateMoviesByCriteria();
	}
	
	public void movieTableCellTapped(Movie movie) {
		delegate.movieTableCellTapped(movie);
	}
	
	public void movieListCellSelected(Movie movie) {
		this.delegate.movieListCellSelected(movie, this.selectedReservation.revervationId());
	}
	
	public void updateScheduleButtonClicked() {
		Movie ticketMovie = this.userController.searchMovies(
				new SearchCriteria(
						this.selectedReservation.movieTitle(), 
						null, 
						null, 
						null)
				)
				.get(0);
		this.delegate.updateScheduleButtonClicked(ticketMovie, this.selectedReservation.revervationId());
	}
	
	public void deleteButtonClicked() {
		this.userController.removeReservation(this.selectedReservation.revervationId());
		updateReservations();
	}
	
	public void ticketTableCellClicked(int rowNumber) {
		if (rowNumber == -1) {
			this.selectedTicket = null;
		} else {
			this.selectedTicket = this.reservationTickets.get(rowNumber);
		}
	}
	
	public DefaultTableModel moviesToTableModel() {
		String[] columns = {
				"제목", 
				"상영시간",
				"등급",
				"감독",
				"배우",
				"장르",
				"개봉일자",
				"평점",
				"설명"
		};
		
		DefaultTableModel tableModel = new DefaultTableModel(columns, 0) {
			@Override
            public boolean isCellEditable(int row, int column) {
                return false; // 모든 셀을 편집 불가능하게 설정
            }
		};
		
		this.movies.forEach(movie -> 
			tableModel.addRow(new Object[] {
						movie.getTitle(), 
						movie.getDuration(),
						movie.getRating().getDescription(),
						movie.getDirector(),
						movie.getActor(),
						movie.getGenre(),
						movie.getReleaseDate().toString(),
						String.valueOf(movie.getScore()),
						movie.getDescription()
				})
		);
		
		return tableModel;
	}
	
	public DefaultTableModel reservationsToTableModel() {
		String[] columns = {
			"영화명",
			"상영일자",
			"상영시간",
			"결제금액"
		};
		
		DefaultTableModel tableModel = new DefaultTableModel(columns, 0) {
			@Override
            public boolean isCellEditable(int row, int column) {
                return false; // 모든 셀을 편집 불가능하게 설정
            }
		};
		
		this.memberReservations.forEach(reservation -> 
			tableModel.addRow(new Object[] {
					String.valueOf(reservation.revervationId()),
					reservation.movieTitle(),
					reservation.startDate().toString(),
					reservation.endDate(),
					reservation.amount()
				})
		);
		
		return tableModel;
	}

	public DefaultTableModel ticketsToTableModel() {
		String[] columns = {
				"영화명",
				"상영일자",
				"상영시간",
				"상영관",
				"판매가격",
				"좌석번호"
			};
			
			DefaultTableModel tableModel = new DefaultTableModel(columns, 0) {
				@Override
	            public boolean isCellEditable(int row, int column) {
	                return false; // 모든 셀을 편집 불가능하게 설정
	            }
			};
			
			this.reservationTickets.forEach(ticket -> 
				tableModel.addRow(new Object[] {
						ticket.movieTitle(),
						ticket.startDate().toString(),
						ticket.startTime(),
						ticket.screenName(),
						ticket.salePrice(),
						"행" + ticket.seatRow() + "열" + ticket.seatCol()
					})
			);
			
			return tableModel;
	}
	
	public void reservationCellSelected(int reservaionRow) {
		if (reservaionRow == -1) {
			reservaionRow = 0;
		}
		this.selectedReservation = this.memberReservations.get(reservaionRow);
		this.reservationTickets = this.userController.getTicketInfoResponses(selectedReservation.revervationId());
	}
	
	private void updateMoviesByCriteria() {
		System.out.println(this.title + ", " + this.director + ", "  + this.actor + ", "  + this.genre);
		this.movies = this.userController.searchMovies(
		new SearchCriteria(
				this.title, 
				this.director, 
				this.actor, 
				this.genre));
	}

	public void updateReservations() {
		// TODO Auto-generated method stub
		this.memberReservations = this.userController.getReservationSummary(member);
		if (this.memberReservations.isEmpty()) {
			this.reservationTickets = new ArrayList<TicketInfoResponse>();
		} else {
			this.reservationTickets = this.userController.getTicketInfoResponses(this.memberReservations.get(0).revervationId());
		}
	}
	
	public List<Movie> allMovies() {
		return this.userController.searchMovies(new SearchCriteria(null, null, null, null));
	}
}
